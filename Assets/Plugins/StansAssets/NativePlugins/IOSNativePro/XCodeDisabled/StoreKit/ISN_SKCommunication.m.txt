#include "ISN_SKCommunication.h"


@implementation SKProduct (LocalizedPrice)

- (NSString *)localizedPrice {
    NSNumberFormatter *numberFormatter = [[NSNumberFormatter alloc] init];
    [numberFormatter setFormatterBehavior:NSNumberFormatterBehavior10_4];
    [numberFormatter setNumberStyle:NSNumberFormatterCurrencyStyle];
    [numberFormatter setLocale:self.priceLocale];
    NSString *formattedString = [numberFormatter stringFromNumber:self.price];
    return formattedString;
}
@end

@implementation SKProductDiscount (LocalizedPrice)

- (NSString *)localizedPrice {
    NSNumberFormatter *numberFormatter = [[NSNumberFormatter alloc] init];
    [numberFormatter setFormatterBehavior:NSNumberFormatterBehavior10_4];
    [numberFormatter setNumberStyle:NSNumberFormatterCurrencyStyle];
    [numberFormatter setLocale:self.priceLocale];
    NSString *formattedString = [numberFormatter stringFromNumber:self.price];
    return formattedString;
}

@end




@implementation ISN_SKProductSubscriptionPeriod
-(id) init { return self = [super init]; }
-(id) initWithSKProductSubscriptionPeriod:(SKProductSubscriptionPeriod *) productSubscriptionPeriod {
    self = [super init];
    if(self) {
        self.m_numberOfUnits = productSubscriptionPeriod.numberOfUnits;
        self.m_unit = productSubscriptionPeriod.unit;
    }
    return self;
}
@end


@implementation ISN_SKProductDiscount
-(id) init { return self = [super init]; }
-(id) initWithSKProductDiscount:(SKProductDiscount *) productDiscount {
    self = [super init];
    if(self) {
        self.m_price         = productDiscount.price   == NULL ? 0   : productDiscount.price;
        
        self.m_priceLocale  = [[ISN_NSLocale alloc] initWithNSLocale:productDiscount.priceLocale];
        self.m_paymentMode   = productDiscount.paymentMode;
        self.m_numberOfUnits = productDiscount.numberOfPeriods;
        self.m_localizedPrice = productDiscount.localizedPrice;
        
        
        //introductoryPrice' is only available on iOS 11.2 or newer
        if(productDiscount.subscriptionPeriod != NULL) {
            self.m_subscriptionPeriod = [[ISN_SKProductSubscriptionPeriod alloc] initWithSKProductSubscriptionPeriod:productDiscount.subscriptionPeriod];
        }
    }
    return self;
}
@end


@implementation ISN_SKProduct
-(id) init { return self = [super init]; }
-(id) initWithSKProduct:(SKProduct *) product {
    self = [super init];
    if(self) {
        self.m_productIdentifier    = product.productIdentifier;
        self.m_localizedDescription = product.localizedDescription == NULL ? @"" : product.localizedDescription;
        self.m_localizedTitle       = product.localizedTitle       == NULL ? @"" : product.localizedTitle;
        self.m_price                = product.price                == NULL ? 0   : product.price;
        
        self.m_priceLocale = [[ISN_NSLocale alloc] initWithNSLocale:product.priceLocale];
        self.m_localizedPrice       = product.localizedPrice;
        
        //introductoryPrice' is only available on iOS 11.2 or newer
        if (@available(iOS 11.2, *)) {
            if(product.introductoryPrice != NULL) {
                self.m_introductoryPrice = [[ISN_SKProductDiscount alloc] initWithSKProductDiscount:product.introductoryPrice];
            }
        } else {
            // Do nothing  on earlier versions
        }
        
        //subscriptionPeriod' is only available on iOS 11.2 or newer
        if (@available(iOS 11.2, *)) {
            if(product.subscriptionPeriod != NULL) {
                self.m_subscriptionPeriod = [[ISN_SKProductSubscriptionPeriod alloc] initWithSKProductSubscriptionPeriod:product.subscriptionPeriod];
            }
        } else {
            // Do nothing  on earlier versions
        }
        
        
    }
    return self;
}
@end

@implementation ISN_SKPaymentTransaction

-(id) initWithSKPaymentTransaction:(SKPaymentTransaction *) transaction {
    self = [super init];
    if(self) {
        
        if(transaction.error != NULL) {
            self.m_error = [[SA_Error alloc] initWithNSError:transaction.error];
        }
        
        if(transaction.originalTransaction != NULL) {
            self.m_originalTransaction = [[ISN_SKPaymentTransaction alloc] initWithSKPaymentTransaction:transaction.originalTransaction];
        }
        
        self.m_state = transaction.transactionState;
        self.m_transactionIdentifier = transaction.transactionIdentifier == NULL ? @"" : transaction.transactionIdentifier;
        self.m_productIdentifier = transaction.payment == NULL || transaction.payment.productIdentifier == NULL ? @"" : transaction.payment.productIdentifier;
        
        if(transaction.transactionDate != NULL) {
            NSDate * myDate = [[NSDate alloc] init];
            NSTimeZone *zone = [NSTimeZone systemTimeZone];
            NSInteger interval = [zone secondsFromGMTForDate:transaction.transactionDate];
            myDate = [myDate dateByAddingTimeInterval:interval];
            self.m_unitxDate = [myDate timeIntervalSince1970];
        } else {
            self.m_unitxDate = 0;
        }
    }
    return self;
}
@end

@implementation SA_PluginSettingsWindowStylesitResult
-(id) init { return self = [super init]; }
-(id) initWithSKProductsRespons:(SKProductsResponse*) response {
    self = [super init];
    if(self) {
        NSMutableArray<ISN_SKProduct> * productsArray = [[NSMutableArray<ISN_SKProduct> alloc] init];
        for (SKProduct *product in response.products) {
            ISN_SKProduct *responseProduct = [[ISN_SKProduct alloc] initWithSKProduct:product];
            [productsArray addObject:responseProduct];
        }
        
        self.m_products = productsArray;
        self.m_invalidProductIdentifiers = response.invalidProductIdentifiers;
    }
    return  self;
}
@end


@implementation SA_PluginSettingsWindowStylesitRequest
-(id) init {  return self = [super init]; }
@end

