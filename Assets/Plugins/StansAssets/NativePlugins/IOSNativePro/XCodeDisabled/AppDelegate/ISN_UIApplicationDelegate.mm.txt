#define USER_NOTIFICATIONS_API_ENABLED

////////////////////////////////////////////////////////////////////////////////
//
// @module IOS Native Plugin
// @author Osipov Stanislav (Stan's Assets)
// @support support@stansassets.com
// @website https://stansassets.com
//
////////////////////////////////////////////////////////////////////////////////


#import <Foundation/Foundation.h>

#import "UnityAppController.h"   //our link to the base class.
#import "ISN_Foundation.h"
#import "ISN_UICommunication.h"

#ifdef USER_NOTIFICATIONS_API_ENABLED
#import "ISN_UNUserNotificationCenter.h"
#endif




@interface ISN_UIApplicationDelegate : UnityAppController  //extend from UnityAppController.

@end


@implementation ISN_UIApplicationDelegate

static bool IsUnitySubscribed = false;

//--------------------------------------
//  Initialization
//--------------------------------------

-(id) init { return self = [super init]; }


//--------------------------------------
//  Static Methods
//--------------------------------------

+ (void) subscribe {
    IsUnitySubscribed = true;
}


+ (void) sendMessage: (const char* ) event {
    [self sendMessage:event withParams:@""];
}


+ (void) sendMessage: (const char* ) event withParams:(NSString*) params {
    if(!IsUnitySubscribed) {
        return;
    }
    
    ISN_SendMessage(UNITY_APP_DELEGATE, event, params);
    
}


//--------------------------------------
//  Unity Events
//--------------------------------------

-(void) startUnity: (UIApplication*) application {
    [super startUnity: application];
}


//--------------------------------------
//  Application State Events
//--------------------------------------


- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {
    
    #if !TARGET_OS_TV
        #ifdef USER_NOTIFICATIONS_API_ENABLED
        [[ISN_UNUserNotificationCenter sharedInstance] addDelegate];
        #endif
    #endif
    
    return [super application:application didFinishLaunchingWithOptions:launchOptions];
}



//--------------------------------------
//  App Shortcut
//--------------------------------------

static NSString* appOpenshortcutItem  = @"";

#if !TARGET_OS_TV
- (void)application:(UIApplication *)application performActionForShortcutItem:(UIApplicationShortcutItem *)shortcutItem  completionHandler:(void (^)(BOOL succeeded))completionHandler {
    
    appOpenshortcutItem = [shortcutItem type];
    [ISN_UIApplicationDelegate sendMessage:"performActionForShortcutItem" withParams:appOpenshortcutItem];
    
}
#endif

+ (NSString*) getAppOpenshortcutItem {
    return  appOpenshortcutItem;
}

- (void)applicationDidEnterBackground:(UIApplication*)application {
    [ISN_UIApplicationDelegate sendMessage:"applicationDidEnterBackground"];
    [super applicationDidEnterBackground:application];
}

- (void)applicationWillEnterForeground:(UIApplication*)application {
    [ISN_UIApplicationDelegate sendMessage:"applicationWillEnterForeground"];
    [super applicationWillEnterForeground:application];
}

- (void)applicationDidBecomeActive:(UIApplication*)application {
    [ISN_UIApplicationDelegate sendMessage:"applicationDidBecomeActive"];
    [super applicationDidBecomeActive:application];
    
}

- (void)applicationWillResignActive:(UIApplication*)application {
    [ISN_UIApplicationDelegate sendMessage:"applicationWillResignActive"];
    [super applicationWillResignActive:application];
}

- (void)applicationDidReceiveMemoryWarning:(UIApplication*)application {
    [ISN_UIApplicationDelegate sendMessage:"applicationDidReceiveMemoryWarning"];
    [super applicationDidReceiveMemoryWarning:application];
}

- (void)applicationWillTerminate:(UIApplication*)application {
    [ISN_UIApplicationDelegate sendMessage:"applicationWillTerminate"];
    [super applicationWillTerminate:application];
}

//--------------------------------------
// Push notifications
//--------------------------------------

- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken {
    ISN_UIRegisterRemoteNotificationsResult *result = [[ISN_UIRegisterRemoteNotificationsResult alloc] init];
    result.m_deviceTokenUTF8 = [[[[deviceToken description]
                                  stringByReplacingOccurrencesOfString: @"<" withString: @""]
                                 stringByReplacingOccurrencesOfString: @">" withString: @""]
                                stringByReplacingOccurrencesOfString: @" " withString: @""];
    ISN_SendMessage(UNITY_APP_DELEGATE, "RemoteNotificationsRegisterationResult", [result toJSONString]);
    
    try {
        [super application:application didRegisterForRemoteNotificationsWithDeviceToken:deviceToken];
    } catch (NSException *exception) {
        NSLog(@"UnityAppController:didRegisterForRemoteNotificationsWithDeviceToken crashed: %@", exception.reason);
    }
}

- (void)application:(UIApplication *)application didFailToRegisterForRemoteNotificationsWithError:(NSError *)error {
    ISN_UIRegisterRemoteNotificationsResult *result = [[ISN_UIRegisterRemoteNotificationsResult alloc] initWithNSError:error];
    ISN_SendMessage(UNITY_APP_DELEGATE, "RemoteNotificationsRegisterationResult", [result toJSONString]);
    
    try {
        [super application:application didFailToRegisterForRemoteNotificationsWithError:error];
    } catch (NSException *exception) {
        NSLog(@"UnityAppController:didFailToRegisterForRemoteNotificationsWithError crashed: %@", exception.reason);
    }    
}


//--------------------------------------
//  Universal Links (Deeplinking)
//--------------------------------------

static NSString* webpageURL  = @"";

-(BOOL) application:(UIApplication *)application continueUserActivity:(nonnull NSUserActivity *)userActivity restorationHandler:(nonnull void (^)(NSArray<id<UIUserActivityRestoring>> * _Nullable))restorationHandler {
    if ([userActivity.activityType isEqualToString:NSUserActivityTypeBrowsingWeb]) {
        webpageURL = userActivity.webpageURL.absoluteString;
        [ISN_UIApplicationDelegate sendMessage:"continueUserActivity" withParams:webpageURL];
    }
    
    return true;
}


+ (NSString*) getLaunchUniversalLink {
    return  webpageURL;
}


//--------------------------------------
//  Application URL Sheme
//--------------------------------------


static NSString* appOpenUrl  = @"";
//static NSString* appSourceApplication  = @"";

#if !TARGET_OS_TV
- (BOOL)application:(UIApplication*)application openURL:(nonnull NSURL *)url options:(nonnull NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options {
      appOpenUrl = [url absoluteString];
     [ISN_UIApplicationDelegate sendMessage:"openURL" withParams:appOpenUrl];
    
    return [super application:application openURL:url options:options];
}
#endif

+ (NSString*) getAppOpenUrl {
    /*
     NSMutableString *data = [[NSMutableString alloc] init] ;
     [data appendString:appOpenUrl];
     [data appendString:UNITY_SPLITTER];
     [data appendString:appSourceApplication];
     */
    return  appOpenUrl;
}


@end

IMPL_APP_CONTROLLER_SUBCLASS( ISN_UIApplicationDelegate )


extern "C" {
    
    void _ISN_AppDelegate_Subscribe() {
        [ISN_Logger LogNativeMethodInvoke:"_ISN_AppDelegate_Subscribe" data:""];

        [ISN_UIApplicationDelegate subscribe];
    }
    
    
    char* _ISN_AppDelegate_GetAppOpenShortcutItem() {
        [ISN_Logger LogNativeMethodInvoke:"_ISN_AppDelegate_GetAppOpenShortcutItem" data:""];

        NSString *Data = [ISN_UIApplicationDelegate getAppOpenshortcutItem];
        
        const char* string = [Data UTF8String];
        char* res = (char*)malloc(strlen(string) + 1);
        strcpy(res, string);
        return res;
    }
    
    char* _ISN_AppDelegate_GetLaunchUniversalLink() {
        [ISN_Logger LogNativeMethodInvoke:"_ISN_AppDelegate_GetLaunchUniversalLink" data:""];
        
        NSString *Data = [ISN_UIApplicationDelegate getLaunchUniversalLink];
        
        const char* string = [Data UTF8String];
        char* res = (char*)malloc(strlen(string) + 1);
        strcpy(res, string);
        return res;
    }
    
    
    char* _ISN_AppDelegate_GetLaunchURL() {
        [ISN_Logger LogNativeMethodInvoke:"_ISN_AppDelegate_GetLaunchURL" data:""];
    
        NSString *Data = [ISN_UIApplicationDelegate getAppOpenUrl];
        
        const char* string = [Data UTF8String];
        char* res = (char*)malloc(strlen(string) + 1);
        strcpy(res, string);
        return res;
    }
    
    
}

